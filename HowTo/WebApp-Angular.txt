Node.js installieren (npm ist inkludiert)
================
msi Paket holen und installieren...
	über https://nodejs.dev/en/download/ (zB.: node-v16.17.0-x64.msi)

check: node -v bzw. npm -v

Angular CLI installieren/updaten (global)
================
npm install -g @angular/cli
check: ng version

CLI infos
- Anm.: Benötigt Internetverbindung!!
- Neues Projekt anlegen:
	ng new PROJECTNAME --routing --skip-git --style css --minimal

- Projekt kompilieren&starten und Browser öffnen: ng serve --open

- mit yarn statt npm arbeiten
	ng new PROJECTNAME --routing --skip-git --style css --minimal --skip-install
	[ins projekt wechseln]
	ng config cli.packageManager yarn
	yarn
	[optional, falls yarn nicht verfügbar vorher noch: corepack enable]
- yarn installieren: npm install --global yarn

Angular schematics CLI installieren (global)
================
npm install -g @angular-devkit/schematics-cli

npm umleiten (AX)
================
user registrieren:	npm adduser --registry http://ax-dev04:4873
paket pushen:		npm publish --registry http://ax-dev04:4873
#set registry:		npm set registry http://ax-dev04:4873 (arbeitet dann auch als proxy!)
set registry:		npm set registry http://ax-rz-dev-004.ad.automationx.com:4873 (arbeitet dann auch als proxy!)
unset:				npm config delete registry (nötig, falls proxy nicht erreichbar)
config list: 	npm config list

Angular Projekt updaten
=================
ng update @angular/cli @angular/core

Angular routing
=================
- Projekt mit --routing anlegen (siehe oben)
- app-routing.module.ts anpassen:
	const routes: Routes = [
	  { path: 'crisis-center', component: CrisisListComponent },
	  { path: 'hero/:id',      component: HeroDetailComponent },
	  {
		path: 'heroes',
		component: HeroListComponent,
		data: { title: 'Heroes List' }
	  },
	  { path: '',
		redirectTo: '/heroes',
		pathMatch: 'full'
	  },
	  { path: '**', component: PageNotFoundComponent }
	];
- HTML: <a routerLink="/crisis-center" routerLinkActive="active">Crisis Center</a>
- Componenten werden bei <router-outlet></router-outlet> eingebaut...


bootstrap für Projekt installieren (siehe https://www.smashingmagazine.com/2019/02/angular-application-bootstrap/)
=================
- npm install --save bootstrap jquery
		old: - npm install jquery popper.js bootstrap
- angular.json anpassen:
	"styles": [
		...,
		"node_modules/bootstrap/dist/css/bootstrap.min.css"
	],
	"scripts": [
		...
		"node_modules/jquery/dist/jquery.min.js",
		"node_modules/bootstrap/dist/js/bootstrap.min.js"
	]
- bootstrap button style fix: styles.css anpassen:
	...
	.btn {
		margin: 1px;
	}
- test: app.component.html
	<div class="container">
	  <button type="button" class="btn">Basic</button>
	  <button type="button" class="btn btn-primary">Primary</button>
	</div>

devextreme für Projekt installieren
=================
- cli (global) installieren: npm i -g devextreme-cli
	Test/Version: devextreme -v
	... kann mit npx auch ohne verwendet werden: npx -p devextreme-cli devextreme [options]

- Neues DevExtrem Projekt mit angular anlegen:
	devextreme new angular-app PROJECT_NAME

- Default Theme ändern:
	1. gewünschte Themes in \src\themes\metadata.base.json bzw. \src\themes\metadata.additional.json eintragen
	2. npm run build-themes

	
material design installieren
=================
ng add @angular/material

- import NgModules -> app.module.ts:
	// immer NACH BrowserModule!
	import {MatButtonModule, MatCheckboxModule} from '@angular/material';

	@NgModule({
	  ...
	  imports: [MatButtonModule, MatCheckboxModule],
	  ...
	})
- style.css: @import "~@angular/material/prebuilt-themes/indigo-pink.css";
- test: app.component.html
	<button mat-stroked-button>Click me!</button>

Debugging mit Chrome
=================
- Chrome: Debugger for Chrome extension installieren
- Studio Code: launch.json bearbeiten (Ctrl+Shift+D):
	{
		"version": "0.2.0",
		"configurations": [
			{
				"type": "chrome",
				"request": "launch",
				"name": "Launch Chrome against localhost",
				"url": "http://localhost:4200",
				"webRoot": "${workspaceFolder}"
			}
		]
	}
- F5 startet Debugger...


Tools
=================
- Swagger (Web API description tool)
- Fiddler (http sniffer)
- OAuth (authentication concept)
- .NET Identity (authentication implementierung .NET Core)
